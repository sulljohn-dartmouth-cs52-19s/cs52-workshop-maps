{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MapContainer","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","inherits","createClass","key","value","react_default","a","createElement","dist","google","initialCenter","lat","lng","zoom","name","position","onClick","visible","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","Component","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAQaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAQRQ,cAAgB,SAACR,EAAOS,EAAQC,GAAhB,OACZT,EAAKU,SAAS,CACZC,cAAeZ,EACfa,aAAcJ,EACdK,mBAAmB,KAbNb,EAgBnBc,QAAU,SAAAf,GACJC,EAAKe,MAAMF,mBACbb,EAAKU,SAAS,CACZG,mBAAmB,EACnBD,aAAc,QAlBlBZ,EAAKe,MAAQ,CACXF,mBAAmB,EACnBD,aAAc,GACdD,cAAe,IALAX,EADrB,OAAAC,OAAAe,EAAA,EAAAf,CAAAJ,EAAAC,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAA,EAAAqB,IAAA,SAAAC,MAAA,WAkCI,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACC,EAAA,IAAD,CACIC,OAAQrB,KAAKJ,MAAMyB,OACnBC,cAAe,CACbC,IAAK,QACLC,KAAM,SAERC,KAAM,IAERR,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACIM,KAAM,qCACNC,SAAU,CAACJ,IAAK,UAAWC,KAAM,WACjCI,QAAS5B,KAAKI,gBAElBa,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACIM,KAAM,0BACNC,SAAU,CAACJ,IAAK,UAAWC,KAAM,WACjCI,QAAS5B,KAAKI,gBAElBa,EAAAC,EAAAC,cAACC,EAAA,WAAD,CACIf,OAAQL,KAAKY,MAAMH,aACnBoB,QAAS7B,KAAKY,MAAMF,kBACpBC,QAASX,KAAKW,SAEhBM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKnB,KAAKY,MAAMJ,cAAckB,QAGlCT,EAAAC,EAAAC,cAACC,EAAA,QAAD,CACIU,MAtCa,CACrB,CAACP,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,SACrB,CAACD,IAAK,QAASC,KAAM,UAmCbO,YAAY,UACZC,cAAe,GACfC,aAAc,EACdC,UAAU,UACVC,YAAa,YAtE3BzC,EAAA,CAAkC0C,aA8EnBC,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZ3C,GC5EiB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c07819cf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Polygon, Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false, //Hides or the shows the infoWindow\n      activeMarker: {}, //Shows the active marker upon click\n      selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n    };\n  }\n\n  onMarkerClick = (props, marker, e) =>\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  render() {\n    const triangleCoords = [\n      {lat: 43.7046, lng: -72.2943},\n      {lat: 43.7034, lng: -72.2886},\n      {lat: 43.7091, lng: -72.2839},\n      {lat: 43.7046, lng: -72.2943}\n    ];\n\n    return (\n      <div>\n        <h1>Hello Google Maps</h1>\n        <Map\n            google={this.props.google}\n            initialCenter={{\n              lat: 43.7044,\n              lng: -72.2887\n            }}\n            zoom={16}\n        >\n          <Marker\n              name={'This is a marker we just made yay!'}\n              position={{lat: 43.708855, lng: -72.284259}}\n              onClick={this.onMarkerClick}\n          />\n          <Marker\n              name={'This is another marker!'}\n              position={{lat: 43.704445, lng: -72.294584}}\n              onClick={this.onMarkerClick}\n          />\n          <InfoWindow\n              marker={this.state.activeMarker}\n              visible={this.state.showingInfoWindow}\n              onClose={this.onClose}\n          >\n            <div>\n              <h2>{this.state.selectedPlace.name}</h2>\n            </div>\n          </InfoWindow>\n          <Polygon\n              paths={triangleCoords}\n              strokeColor=\"#0000FF\"\n              strokeOpacity={0.8}\n              strokeWeight={2}\n              fillColor=\"#0000FF\"\n              fillOpacity={0.35}\n          />\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAFB5uiv2S_3ce9m1sL9AyXuypkjWvg_Pk'\n})(MapContainer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}